/* eslint-disable import/extensions */
/* eslint-disable max-len */
import pkg from '@prisma/client';
import { add } from 'date-fns';
import bcrypt from 'bcrypt';
import { accessTokenSecret, refreshTokenSecret, tokenInfo } from '../../../config.js';
import * as jwtHelper from '../../helpers/jwt.helper.js';

const { PrismaClient, TokenType } = pkg;
const prisma = new PrismaClient();

// eslint-disable-next-line no-return-await
export const findSpecificUser = async (emailInput) => {
  const email = await prisma.user.findUnique({
    where: {
      email: emailInput,
    },
    select: {
      email: true,
    },
  });

  return email;
};

// Bi·∫øn c·ª•c b·ªô tr√™n server n√†y s·∫Ω l∆∞u tr·ªØ t·∫°m danh s√°ch token
// Trong d·ª± √°n th·ª±c t·∫ø, n√™n l∆∞u ch·ªó kh√°c, c√≥ th·ªÉ l∆∞u v√†o Redis ho·∫∑c DB
const tokenList = {};

const { accessTokenLife, refreshTokenLife } = tokenInfo;

/**
 * controller login
 * @param {*} req
 * @param {*} res
 */
const login = async (req, res) => {
  try {
    // M√¨nh s·∫Ω comment m√¥ t·∫£ l·∫°i m·ªôt s·ªë b∆∞·ªõc khi l√†m th·ª±c t·∫ø cho c√°c b·∫°n nh∆∞ sau nh√©:
    // - ƒê·∫ßu ti√™n Ki·ªÉm tra xem email ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng hay ch∆∞a?
    // - N·∫øu ch∆∞a t·ªìn t·∫°i th√¨ reject: User not found.
    // - N·∫øu t·ªìn t·∫°i user th√¨ s·∫Ω l·∫•y password m√† user truy·ªÅn l√™n, bƒÉm ra v√† so s√°nh v·ªõi m·∫≠t kh·∫©u c·ªßa user l∆∞u trong Database
    // - N·∫øu password sai th√¨ reject: Password is incorrect.
    // - N·∫øu password ƒë√∫ng th√¨ ch√∫ng ta b·∫Øt ƒë·∫ßu th·ª±c hi·ªán t·∫°o m√£ JWT v√† g·ª≠i v·ªÅ cho ng∆∞·ªùi d√πng.
    // Trong v√≠ d·ª• demo n√†y m√¨nh s·∫Ω coi nh∆∞ t·∫•t c·∫£ c√°c b∆∞·ªõc x√°c th·ª±c ·ªü tr√™n ƒë·ªÅu ok, m√¨nh ch·ªâ x·ª≠ l√Ω ph·∫ßn JWT tr·ªü v·ªÅ sau th√¥i nh√©:

    // üëá get the email from the request payload
    const { email: emailReq, password: passwordReq } = req.body;

    const emailUser = await prisma.user.findUnique({
      where: {
        email: emailReq,
      },
      select: {
        email: true,
        firstName: true,
        lastName: true,
        password: true,
        id: true,
      },
    });

    const {
      email, firstName, lastName, password, id,
    } = emailUser;

    if (!email) {
      return res.status(403).json({ message: 'email not created' });
    }

    // const saltRounds = await bcrypt.genSalt(10);

    // // now we set user password to hashed password
    // const hash = bcrypt.hashSync(passwordReq, saltRounds);

    // console.log(bcrypt.compareSync(password, hash));

    // üëá create a date object for the email token expiration
    const tokenExpiration = add(new Date(), {
      minutes: 60,
    });

    if (!bcrypt.compareSync(passwordReq, password)) {
      return res.status(402).json({ message: 'password not correct' });
    }

    const user = {
      email, firstName, lastName, id,
    };

    const accessToken = await jwtHelper.generateToken(user, accessTokenSecret, accessTokenLife);

    const refreshToken = await jwtHelper.generateToken(user, refreshTokenSecret, refreshTokenLife);

    // L∆∞u l·∫°i 2 m√£ access & Refresh token, v·ªõi key ch√≠nh l√† c√°i refreshToken ƒë·ªÉ ƒë·∫£m b·∫£o unique v√† kh√¥ng s·ª£ hacker s·ª≠a ƒë·ªïi d·ªØ li·ªáu truy·ªÅn l√™n.
    // l∆∞u √Ω trong d·ª± √°n th·ª±c t·∫ø, n√™n l∆∞u ch·ªó kh√°c, c√≥ th·ªÉ l∆∞u v√†o Redis ho·∫∑c DB
    // tokenList[refreshToken] = { accessToken, refreshToken };

    // üëá create a short lived token and update user or create if they don't exist

    // eslint-disable-next-line no-unused-vars
    const createdToken = await prisma.token.create({
      data: {
        accessToken,
        refreshToken,
        type: TokenType.API,
        expiration: tokenExpiration,
        user: {
          connectOrCreate: {
            create: {
              email,
            },
            where: {
              email,
            },
          },
        },
      },
    });

    return res.status(200).json({ accessToken, refreshToken });
  } catch (error) {
    // eslint-disable-next-line no-console
    console.log(error);
    return res.status(500).json({ message: error });
  }
};

/**
 * controller refreshToken
 * @param {*} req
 * @param {*} res
 */

// eslint-disable-next-line consistent-return
const refreshToken = async (req, res) => {
  // User g·ª≠i m√£ refresh token k√®m theo trong body
  const refreshTokenFromClient = req.body.refreshToken;

  // N·∫øu nh∆∞ t·ªìn t·∫°i refreshToken truy·ªÅn l√™n v√† n√≥ c≈©ng n·∫±m trong tokenList c·ªßa ch√∫ng ta
  if (refreshTokenFromClient && (tokenList[refreshTokenFromClient])) {
    try {
      // Verify ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c√°i refreshToken v√† l·∫•y d·ªØ li·ªáu gi·∫£i m√£ decoded
      const decoded = await jwtHelper.verifyToken(refreshTokenFromClient, refreshTokenSecret);

      // Th√¥ng tin user l√∫c n√†y c√°c b·∫°n c√≥ th·ªÉ l·∫•y th√¥ng qua bi·∫øn decoded.data
      // c√≥ th·ªÉ m·ªü comment d√≤ng debug b√™n d∆∞·ªõi ƒë·ªÉ xem l√† r√µ nh√©.
      // debug("decoded: ", decoded);
      const userFakeData = decoded.data;
      const accessToken = await jwtHelper.generateToken(userFakeData, accessTokenSecret, accessTokenLife);

      // g·ª≠i token m·ªõi v·ªÅ cho ng∆∞·ªùi d√πng
      return res.status(200).json({ accessToken });
    } catch (error) {
      res.status(403).json({
        message: 'Invalid refresh token.',
      });
    }
  }
};

export { login, refreshToken };
